<?php

  /**
   * @file
   * Core functionality for the Islandora DSS Solr Module
   *
   */

// Includes functions to create Islandora Solr blocks.
require_once dirname(__FILE__) . '/theme/theme.inc';
require_once dirname(__FILE__) . '/includes/blocks.inc';

/**
 * Page callback: Islandora Solr.
 *
 * Gathers url parameters, and calls the query builder, which prepares the query
 * based on the admin settings and url values.
 * Finds the right display and calls the IslandoraSolrRestuls class to build the
 * display, which it returns to the page.
 *
 * @see islandora_solr()
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   the IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 * @param $query
 *   The query string
 * @return
 *   A rendered Solr display
 *
 * @see hook_menu()
 */
function islandora_dss_solr($query = NULL) {

  global $_islandora_solr_queryclass;
  drupal_add_css(drupal_get_path('module', 'islandora_solr') . '/css/islandora_solr.theme.css');

  // Url parameters.
  $params = $_GET;

  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');

  // Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) && in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }

  $query_array = array();

  /**
   * @todo Refactor
   *
   */
  if(array_key_exists('f', $params)) {

    $collection = $params['f']['0'];

    if(preg_match('/cdm.Relation.IsPartOf:"(.+)"/', $collection, $m)) {

      $collection = $m[1];

      $ISLANDORA_DSS_SOLR_RELATION_MAP = array_flip(array('eastasia' => 'East Asia Image Collection',
							  'newspaper' => 'Lafayette Newspaper Collection',
							  'academic' => 'Academic Publications',
							  'cap' => 'Historical Photograph Collection',
							  'mdl-prints' => 'Marquis de Lafayette Prints Collection',
							  'geology-slides' => 'Geology Department Slide Collection',
							  'administration' => 'Administration Archives',
							  'mckelvy' => 'McKelvy House Photograph Collection',
							  'war-casualties' => 'Lafayette World War II Casualties',
							  'magazine' => 'Lafayette Magazine Collection',
							  'shakespeare' => 'Shakespeare Bulletin Archive'
							  ));
      $collection = $ISLANDORA_DSS_SOLR_RELATION_MAP[$collection];
    }
  }

  /**
   * foxml.all.text is functioning (without case sensitivity issues) for the cap and mdl-prints collections
   * Resolves DSS-207
   *
   */

  // create query
  $internal_solr_query = '';

  // Quotation marks are applied to all queries
  $query = preg_replace('/"\((.+?)\)(.*?)"/', '"$1$2"', $query);

  foreach(preg_split('/(?<=\)) /', $query) as $search) {

    if(preg_match('/(.+?)\:(\[.+?\])/', $search, $range_match)) { // Handling also for ranges

      $prefix = $range_match[1];
      $search = $range_match[2];
    } elseif(preg_match('/(.+?)\:\((.+?)\)/', $search, $m)) {

      $prefix = $m[1];
      $search = $m[2];
    } else { //if(!preg_match('/(.+?)\:\((.+?)\)/', $search, $m)) {

      continue;
    }

    // Handling for boolean operators
    if(preg_match('/(?:AND|OR|NOT) (.+)/', $prefix, $prefix_match)) {
      
      $field = $prefix_match[1];
    } else {

      $field = trim($prefix);
    }
    
    /**
     * Work-around for case sensitivity
     * Resolves DSS-208
     *
     */
    $SOLR_FULLTEXT_FIELDS = array('foxml.all.text'
				  );

    $SOLR_INDEXED_FIELDS = array('eastasia.Title.Japanese' => 'Title.Japanese', // Resolve with re-indexing (DSSSM-614 )
				 'eastasia.Title.Chinese' => 'Title.Chinese', // DSSSM-614
				 'eastasia.Title.Korean' => 'Title.Korean', // DSSSM-614
				 "eastasia.Contributors.Digital" => 'Contributor',
				 "eastasia.Contributor.Donor" => 'Contributor.Donor',
				 "eastasia.Coverage.Location" => 'Coverage.Location',
				 "eastasia.Coverage.Location.Country" => 'Coverage.Location.Country',
				 "eastasia.Creator.Company" => 'Creator.Company',
				 "eastasia.Creator.Maker" => 'Creator.Maker',

				 "eastasia.Description.Ethnicity" => 'Description.Ethnicity',
				 "eastasia.Description.Indicia" => 'Description.Indicia',

				 "eastasia.Format.Medium" => 'Format.Medium',
				 "eastasia.Subject.OCM" => 'Subject.OCM',

				 "cdm.Relation.IsPartOf" => 'Relation.IsPartOf',

				 'dc.description' => 'Description',
				 'dc.type' => 'Medium',

				 'mdl_prints.creator' => 'creator',

				 'mdl_prints.description' => 'description',
				 'mdl_prints.description.condition' => 'description.condition',
				 'mdl_prints.description.note' => 'description.note',
				 'mdl_prints.description.provenance' => 'description.provenance',
				 'mdl_prints.description.series' => 'description.series',
				 'mdl_prints.format.digital' => 'format.digital',
				 'mdl_prints.format.extent' => 'format.extent',
				 'mdl_prints.format.medium' => 'format.medium',
				 'mdl_prints.identifier.itemnumber' => 'identifier.item.number',
				 'mdl_prints.publisher.digital' => 'publisher.digital',
				 'mdl_prints.publisher.original' => 'publisher.original',

				 'mdl_prints.rights.digital' => 'rights.digital',
				 'mdl_prints.publisher.digital' => 'source',
				 'mdl_prints.subject.lcsh' => 'subject.lcsh',

				 'geology_slides_esi.coverage.location' => 'Coverage',
				 'geology_slides_esi.description' => 'Description',

				 'geology_slides_esi.relation.seealso.book' => 'Related Book',
				 'geology_slides_esi.relation.seealso.image' => 'Related Image',
				 'geology_slides_esi.subject' => 'Subject',
				 'geology_slides_esi.description.vantagepoint' => 'Vantage Point',

				 'mckelvy.creator.maker' => 'Creator',
				 'mckelvy.description.size' => 'Dimensions',
				 'mckelvy.format.medium' => 'Medium',
				 'mckelvy.description.note' => 'Note',

				 'war_casualties.description.cause.death' => 'Cause of Death',
				 'war_casualties.description.class' => 'Graduating Class',
				 'war_casualties.description.military.branch' => 'Military Branch',
				 'war_casualties.description.honors' => 'Military Honors',
				 'war_casualties.description.military.rank' => 'Military Rank',
				 'war_casualties.contributor.military.unit' => 'Military Unit',
				 'war_casualties.coverage.place.birth' => 'Place of Birth',
				 'war_casualties.coverage.place.death' => 'Place of Death',

				 'MODS.mods.relatedItem.date.w3cdtf_dts' => 'Date',
				 'MODS.mods.relatedItem.part.date.approximate_s' => 'Date',
				 'MODS.mods.relatedItem.originInfo.dateIssued.approximate_s' => 'Date',

				 'MODS.mods.titleInfo.title_ss' => 'Title',
				 'MODS.mods.titleInfo.subTitle_s' => 'Subtitle',
				 'MODS.mods.titleInfo.partNumber_s' => 'Part Of',
				 'MODS.mods.name.displayForm_s' => 'Author',				 
				 'MODS.mods.relatedItem.titleInfo.title_s' => 'Publication Title' // Changing this label from "Series" to "Publication Title" in accordance with DSSSM-1177
				 );

    //global $ISLANDORA_DSS_SOLR_DATE_FIELDS;
    $ISLANDORA_DSS_SOLR_DATE_FIELDS = array('dc.date',
					    "eastasia.Date.Artifact.Lower",
					    "eastasia.Date.Artifact.Upper",
					    "eastasia.Date.Image.Lower",
					    "eastasia.Date.Image.Upper",
					    "eastasia.Date.Original",
					    'mdl_prints.date.original',
					    'geology_slides_esi.date.original',
					    'mckelvy.date.original.search',
					    'war_casualties.date.birth.display',
					    'war_casualties.date.death.display',
					    'MODS.mods.relatedItem.date.w3cdtf_dts',
					    'MODS.mods.originInfo.dateIssued.w3cdtf_dt'
					    );

    if(array_key_exists($field, $SOLR_INDEXED_FIELDS)) { // For Solr-indexed fields with specific Analyzers (i. e. not optimized for tokenization of contents)

      $prefix = str_replace($field, 'c_' . $field, $prefix);
    } elseif(isset($collection) and in_array($collection, array('newspaper', 'magazine', 'shakespeare')) and in_array($field, array('foxml.all.text', 'ds.OBJ'))) {

      $prefix = str_replace($field, 'c_' . $field, $prefix);
    } elseif($field == 'geology_slides_esi.subject') {

      // Quotation marks are applied to all queries
      preg_match('/"(.+?)"/', $search, $m);
      $search = $m[1];

      // Escape spaces
      // Refactor
      $search = preg_replace('/ /', '\ ', $search);
      // Escape brackets
      // Refactor
      $search = preg_replace('/\\[/', '\[', $search);
      $search = preg_replace('/\\]/', '\]', $search);

      //$search = "(*" . strtoupper($search) . "*)";
      $search = "(*$search* OR *" . strtoupper($search) . "*)";
    } elseif(in_array($field, array('foxml.all.text', 'ds.OBJ'))) {

      $search = preg_replace('/\\(/', '\(', $search);
      $search = preg_replace('/\\)/', '\)', $search);

      $search = preg_replace('/\\"/', '', $search);
      
    } elseif(!in_array($field, array('foxml.all.text', 'ds.OBJ'))) {

      // Quotation marks are applied to all queries
      if(preg_match('/"(.+?)"/', $search, $m)) {

	$search = $m[1];
      }

      // Escape spaces
      // Refactor
      $search = preg_replace('/ /', '\ ', $search);
      // Escape brackets
      // Refactor
      $search = preg_replace('/\\[/', '\[', $search);
      $search = preg_replace('/\\]/', '\]', $search);
      if(ctype_upper($search)) { // Search segment characters are all in the upper case

	$search = "(*$search* OR *" . strtolower($search) . "* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	//$search = "(\"*$search*\" OR \"*" . strtolower($search) . "*\" OR \"*" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*\")";
      } elseif(ctype_lower($search)) { // Search segment characters are all in the lower case

	//$search = "(*$search* OR *" . strtoupper($search) . "*)";
	//$search = "(*$search* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	$search = "(*$search* OR *" . strtoupper($search) . "* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	//$search = "(\"*$search*\" OR \"*" . strtoupper($search) . "*\" OR \"*" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*\")";
      } elseif(preg_match('/[A-Z]/', $search)) { // Initial search segment character is in the upper case
	
	//$search = "(*$search* OR *" . lcfirst($search) . "*)";
	$search = "(*$search* OR *" . lcfirst($search) . "* OR *" . strtoupper($search) . "*)";
	//$search = "(\"*$search*\" OR \"*" . lcfirst($search) . "*\" OR \"*" . strtoupper($search) . "*\")";
      } else {

	//$search = "(*$search* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	$search = "(*$search* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "* OR *" . strtoupper($search) . "*)";
	//$search = "(\"*$search*\" OR \"*" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*\" OR \"*" . strtoupper($search) . "*\")";
      }

    }

    $internal_solr_query .= "$prefix:$search" . ' ';
  }

  /**
   * Special handling for foxml.all.text
   * Work-around resolving DSS-207
   *
   */

  if($query != '*:*') {

    $params['q'] = $internal_solr_query;
  } else {

    $internal_solr_query = $query;
  }

  /**
   * Ensure that all queries are sorted by the value of dc.title in ascending order
   * Resolves DSSSM-623
   *
   */
  if(!array_key_exists('sort', $params)) {

    /**
     * If this is a member of the newspaper collection, sort by the publication date
     * Resolves DSSSM-865
     *
     * Also, if this is a member of the historical collection, sort by publication date
     * @todo Refactor for includes/islandora_solr.inc within bootstrap_dss_digital
     * Resolves DSSSM-983
     *
     */
    $params['sort'] = 'dc.title asc';

    if(array_key_exists('f', $params) and !empty($params['f'])) {

      // More complex sorting logic introduced for other facets
      // Resolves DSS-609

      // Read the facets from an external file
      $dc_date_sort = array_intersect($params['f'], array('cdm.Relation.IsPartOf:"Historical Photograph Collection"',

							  'cdm.Relation.IsPartOf:"Lafayette Newspaper Collection"',

							  'dc.subject:"The Lafayette (1884-)"',
							  'dc.subject:"The Lafayette Journal (1875-1884)"',
							  'dc.subject:"The Lafayette Monthly (1870-1875)"',

							  'dc.publisher:"Lafayette College"',

							  'dc.type:"Student newspaper"',
							  'dc.type:"Text"',
							  ));

      $identifier_local_sort = array_intersect($params['f'], array('cdm.Relation.IsPartOf:"Lafayette Magazine Collection"',
								   
								   'MODS.mods.originInfo.publisher_s:"Alumni Association of Lafayette College"',
								   'MODS.mods.originInfo.publisher_s:"Lafayette College, Division of Communications"',
								   'MODS.mods.originInfo.publisher_s:"Lafayette College, Office of Alumni Affairs"',
								   'MODS.mods.originInfo.publisher_s:"Lafayette College, Office of Alumni Affairs in cooperation with the Office of Public Information"',
								   'MODS.mods.originInfo.publisher_s:"Lafayette College, Office of Public Information"',

								   'MODS.mods.relatedItem.titleInfo.title_s:"Lafayette Alumni News [newspaper]"',
								   'MODS.mods.relatedItem.titleInfo.title_s:"Lafayette Alumnus Football News Letter"',
								   'MODS.mods.relatedItem.titleInfo.title_s:"Lafayette Magazine"',
								   ));

      $related_item_date_sort = array_intersect($params['f'], array('cdm.Relation.IsPartOf:"Shakespeare Bulletin Archive"',
								    'MODS.mods.titleInfo_s:"Shakespeare Bulletin"',
								    'MODS.mods.titleInfo_s:"Shakespeare on Film Newsletter"',
								    'MODS.mods.titleInfo_s:"Bulletin of the New York Shakespeare Society"',
								    'MODS.mods.titleInfo_s:"Bulletin of the New York Shakespear[e] Society"',
								    'MODS.mods.titleInfo_s:"New York Shakespeare Society Bulletin"',
								    'MODS.mods.originInfo.publisher_s:"Department of English, University of Vermont"',
								    'MODS.mods.originInfo.publisher_s:"Lafayette College"',
								    'MODS.mods.originInfo.publisher_s:"Lafayette College in affiliation with The New York Shakespeare Society"',
								    'MODS.mods.originInfo.publisher_s:"The New York Shakespeare Society"',
								    'MODS.mods.relatedItem.titleInfo.title_s:"Shakespeare Bulletin"',
								    'MODS.mods.relatedItem.titleInfo.title_s:"Shakespeare on Film Newsletter"',
								    ));

      if($related_item_date_sort) {

	// Default to sorting on the date of the publication series
	$params['sort'] = 'MODS.mods.relatedItem.date.w3cdtf_dts asc';
      } elseif($identifier_local_sort) {

	// This resolves DSS-419
	$params['sort'] = 'MODS.mods.identifier.local_i asc';
      } elseif($dc_date_sort) {

	// This resolves DSS-419
	$params['sort'] = 'dc.date.sort asc';
      }
    }
  }

  // Build and execute Apache Solr query.
  // this populates the GLOBAL!!!!!!!
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
  $_islandora_solr_queryclass->buildAndExecuteQuery($internal_solr_query, $params);

  if (empty($_islandora_solr_queryclass->islandoraSolrResult)) {
    return t('Error searching solr index.');
  }

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($_GET['solr_profile']) && isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Get display class and function from current display
  $solr_class = $profile['class'];
  $solr_function = $profile['function'];

  // check if the display's class exists
  $use_default_display = TRUE;
  if (class_exists($solr_class)) {
    $implementation = new $solr_class();
    // check if the display's method exists
    if (method_exists($implementation, $solr_function)) {
      // implement results
      $output = $implementation->$solr_function($_islandora_solr_queryclass);
      $use_default_display = FALSE;
    }
  }

  // Class and method are not found: use default
  if ($use_default_display) {
    $results_class = new IslandoraSolrResults();
    $output = $results_class->displayResults($_islandora_solr_queryclass);
  }

  // debug dump
  if (variable_get('islandora_solr_debug_mode', 0)) {
    $message = t('Params: <br /><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE)));
    drupal_set_message(filter_xss($message, array('pre', 'br')), 'status');
  }

  return $output;
}

/**
 * Implemented hook_url_inbound_alter().
 * 
 */
function islandora_dss_solr_url_inbound_alter(&$path, $original_path, $path_language) {

  /**
   * Collection and sub-collection path aliases
   * Resolves DSSSM-665
   * @todo Refactor with variable_get
   *
   */

  $ISLANDORA_DSS_SOLR_BROWSE_COLL_ALIASES = array('collections/eastasia',
						  'collections/geology',
						  'collections/historicalphotos',
						  'collections/war',
						  'collections/newspaper',
						  'collections/lafayetteprints',
						  'collections/mckelvy',
						  'collections/magazine',
						  'collections/sbarchive',
						  );

  $ISLANDORA_DSS_SOLR_BROWSE_SUB_COLL_ALIASES = array(
						      'collections/eastasia/imperial-postcards',
						      'collections/eastasia/pa-koshitsu',
						      'collections/eastasia/pa-tsubokura',
						      'collections/eastasia/rjw-stereo',
						      'collections/eastasia/pa-omitsu01',
						      'collections/eastasia/pa-omitsu02',
						      'collections/eastasia/lin-postcards',
						      'collections/eastasia/pacwar-postcards',
						      'collections/eastasia/lewis-postcards',
						      'collections/eastasia/warner-postcards',
						      'collections/eastasia/warner-negs-indonesia',
						      'collections/eastasia/warner-negs-manchuria',
						      'collections/eastasia/warner-negs-taiwan',
						      'collections/eastasia/warner-slides-japan',
						      'collections/eastasia/warner-souvenirs',
						      'collections/eastasia/woodsworth-images',
						      'collections/eastasia/cpw-nofuko',
						      'collections/eastasia/cpw-shashinkai',
						      'collections/eastasia/gc-iroha01',
						      'collections/eastasia/tjwar-postcards',
						      );

  if(in_array($original_path, $ISLANDORA_DSS_SOLR_BROWSE_SUB_COLL_ALIASES)) {

    drupal_goto("$original_path/browse", array(), 301);
  } elseif(preg_match('/\/browse/', $original_path)
	   and (in_array(str_replace('/browse', '', $original_path), $ISLANDORA_DSS_SOLR_BROWSE_COLL_ALIASES)
		or in_array(str_replace('/browse', '', $original_path), $ISLANDORA_DSS_SOLR_BROWSE_SUB_COLL_ALIASES))) {

    // Does not resolve issues with more complex GET parameters
    //$_GET += drupal_get_query_array(array_pop(explode('?', $path)));
    list($path, $query) = explode('?', $path);
    $facet_index = 0;
    foreach(drupal_get_query_array($query) as $facet_name => $facet_value) {

      $_GET["f"][$facet_index] = $facet_value;
      $facet_index++;
    }
  }
}

/**
 * Implements hook_menu().
 */
function islandora_dss_solr_menu_alter(&$items) {

  $items['islandora/search']['page callback'] = 'islandora_dss_solr';

  /**
   * Hide the "Site" and "User" menu items within the search results interface
   * Resolves DSSSM-734
   *
   */
  $items['search/site/%menu_tail']['access callback'] = FALSE;
  $items['search/site/%']['access callback'] = FALSE;

  $items['search/user/%menu_tail']['access callback'] = FALSE;
}

