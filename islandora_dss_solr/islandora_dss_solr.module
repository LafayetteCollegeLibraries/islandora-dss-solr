<?php

  /**
   * @file
   * Core functionality for the Islandora DSS Solr Module
   *
   */

// Includes functions to create Islandora Solr blocks.
require_once dirname(__FILE__) . '/theme/theme.inc';
require_once dirname(__FILE__) . '/includes/blocks.inc';

/**
 * Page callback: Islandora Solr.
 *
 * Gathers url parameters, and calls the query builder, which prepares the query
 * based on the admin settings and url values.
 * Finds the right display and calls the IslandoraSolrRestuls class to build the
 * display, which it returns to the page.
 *
 * @see islandora_solr()
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   the IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 * @param $query
 *   The query string
 * @return
 *   A rendered Solr display
 *
 * @see hook_menu()
 */
function islandora_dss_solr($query = NULL) {

  global $_islandora_solr_queryclass;
  drupal_add_css(drupal_get_path('module', 'islandora_solr') . '/css/islandora_solr.theme.css');

  // Url parameters.
  $params = $_GET;

  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');

  // Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) && in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }

  /**
   * @todo Refactor
   *
   */
  $collection = $params['f']['0'];
  preg_match('/cdm.Relation.IsPartOf:"(.+)"/', $collection, $m);
  $collection = $m[1];

  $ISLANDORA_DSS_SOLR_RELATION_MAP = array_flip(array('eastasia' => 'East Asia Image Collection',
						      'newspaper' => 'Lafayette Newspaper Collection',
						      'academic' => 'Academic Publications',
						      'cap' => 'Historical Photograph Collection',
						      'mdl-prints' => 'Marquis de Lafayette Prints Collection',
						      'geology-slides' => 'Geology Slide Collection',
						      'administration' => 'Administration Archives',
						      'mckelvy' => 'McKelvy House Photograph Collection',
						      'war-casualties' => 'Lafayette World War II Casualties',
						      ));
  $collection = $ISLANDORA_DSS_SOLR_RELATION_MAP[$collection];

  foreach(preg_split('/(?<=\)) /', $query) as $search) {

    preg_match('/(.+?)\:\((.+?)\)/', $search, $m);
    $field = $m[1];
    $search = $m[2];

  /**
   * Work-around for case sensitivity
   * Resolves DSS-208
   *
   */
  if(ctype_upper($search)) {
    
    if(preg_match('/"(.+?)"/', $search, $m)) {
      
      $search = "($search OR " . '"' . strtolower($m[1]) . '"' . ")";
    } else {
      
      $search = "($search OR " . strtolower($search) . ")";
    }
  } elseif(ctype_lower($search)) {
    
    if(preg_match('/"(.+?)"/', $search, $m)) {
      
      $search = "($search OR \"" . strtoupper($m[1]) . "\")";
    } else {
      
      $search = "($search OR " . strtoupper($search) . ")";
    }
  } elseif(preg_match('/[A-Z]/', $search)) {
    
    if(preg_match('/"(.+?)"/', $search, $m)) {
      
      $search = "($search OR \"" . lcfirst($m[1]) . "\")";
    } else {
      
      $search = "($search OR " . lcfirst($search) . ")";
    }
  } else {
    
    if(preg_match('/"(.+?)"/', $search, $m)) {
      
      $search = "($search OR \"" . mb_convert_case($m[1], MB_CASE_TITLE, "UTF-8") . "\")";
      
      //$search_case_title = mb_strtoupper(substr($m[1], 0, 1)) . substr($m[1], 1);
      //$search = "($search OR \"" . $search_case_title . "\")";
    } else {
      
      $search = "($search OR " . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . ")";
      
      //$search_case_title = mb_strtoupper(substr($search, 0, 1)) . substr($search, 1);
      //$search = "($search OR " . $search_case_title . ")";
    }
  }

  /**
   * Special handling for foxml.all.text
   * Work-around resolving DSS-207
   *
   */
  
  if($field == 'foxml.all.text') {
    
    $collection_fields = array_keys(islandora_dss_fields_map($collection));
    foreach($collection_fields as $collection_field) {
      
      if(!preg_match('/Date\./', $collection_field)) {

	$query_array[] = array(
			       //'search' => "$collection_field:($search or )",
			       'search' => "$collection_field:$search",
			       'boolean' => 'OR'
			       );
      }
    }
  } else {
    
    $query_array[] = array(
			   //'search' => "$field:($search)",
			   'search' => "$field:$search",
			   'boolean' => $boolean
			   );
  }
  }

  dpm($query);

  // create query
  $query = '';
  $i = 0;
  foreach ($query_array as $term) {
    $query .= $term['search'];
    if (count($query_array) -1 != $i) {
      $query .= ' ' . $term['boolean'] . ' ';
    }
    $i++;
  }

  // Build and execute Apache Solr query.
  // this populates the GLOBAL!!!!!!!
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
  $_islandora_solr_queryclass->buildAndExecuteQuery($query, $params);

  if (empty($_islandora_solr_queryclass->islandoraSolrResult)) {
    return t('Error searching solr index.');
  }

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($_GET['solr_profile']) && isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Get display class and function from current display
  $solr_class = $profile['class'];
  $solr_function = $profile['function'];


  // check if the display's class exists
  $use_default_display = TRUE;
  if (class_exists($solr_class)) {
    $implementation = new $solr_class();
    // check if the display's method exists
    if (method_exists($implementation, $solr_function)) {
      // implement results
      $output = $implementation->$solr_function($_islandora_solr_queryclass);
      $use_default_display = FALSE;
    }
  }

  // Class and method are not found: use default
  if ($use_default_display) {
    $results_class = new IslandoraSolrResults();
    $output = $results_class->displayResults($_islandora_solr_queryclass);
  }

  // debug dump
  if (variable_get('islandora_solr_debug_mode', 0)) {
    $message = t('Params: <br /><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE)));
    drupal_set_message(filter_xss($message, array('pre', 'br')), 'status');
  }

  return $output;
}

/**
 * Implements hook_menu().
 */
function islandora_solr_menu_alter(&$items) {

  /*
  $items['islandora/search'] = array(
    'title' => 'Search results',
    'page callback' => 'islandora_solr',
    'access arguments' => array('search islandora solr'),
    'type' => MENU_CALLBACK,
  );
  */

  $items['islandora/search']['page callback'] = 'islandora_dss_solr';
}