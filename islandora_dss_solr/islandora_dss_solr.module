<?php

  /**
   * @file
   * Core functionality for the Islandora DSS Solr Module
   *
   */

// Includes functions to create Islandora Solr blocks.
require_once dirname(__FILE__) . '/theme/theme.inc';
require_once dirname(__FILE__) . '/includes/blocks.inc';

/**
 * Page callback: Islandora Solr.
 *
 * Gathers url parameters, and calls the query builder, which prepares the query
 * based on the admin settings and url values.
 * Finds the right display and calls the IslandoraSolrRestuls class to build the
 * display, which it returns to the page.
 *
 * @see islandora_solr()
 *
 * @global IslandoraSolrQueryProcessor $_islandora_solr_queryclass
 *   the IslandoraSolrQueryProcessor object which includes the current query
 *   settings and the raw Solr results.
 * @param $query
 *   The query string
 * @return
 *   A rendered Solr display
 *
 * @see hook_menu()
 */
function islandora_dss_solr($query = NULL) {

  global $_islandora_solr_queryclass;
  drupal_add_css(drupal_get_path('module', 'islandora_solr') . '/css/islandora_solr.theme.css');

  // Url parameters.
  $params = $_GET;

  // get profiles
  $primary_profiles = module_invoke_all('islandora_solr_primary_display');
  $secondary_profiles = module_invoke_all('islandora_solr_secondary_display');

  // Get the preferred display profile
  // Order: First choice is what's in the ?profile query var
  //        Second choice is the primary display profile
  //        Third choice is the default IslandoraSolrResults
  $enabled_profiles = array();
  // get enabled displays
  $primary_display_array = variable_get('islandora_solr_primary_display_table', array());
  // if it's set, we take these values
  if (isset($primary_display_array['enabled'])) {
    foreach ($primary_display_array['enabled'] as $key => $value) {
      if ($key === $value) {
        $enabled_profiles[] = $key;
      }
    }
  }

  // Set primary display
  // check if display param is an valid, enabled profile. Else show default.
  if (isset($params['display']) && in_array($params['display'], $enabled_profiles)) {
    $islandora_solr_primary_display = $params['display'];
  }
  else {
    $islandora_solr_primary_display = variable_get('islandora_solr_primary_display', 'default');
    // unset invalid parameter
    unset($params['display']);
  }

  $query_array = array();

  /**
   * @todo Refactor
   *
   */
  if(array_key_exists('f', $params)) {

    $collection = $params['f']['0'];
    preg_match('/cdm.Relation.IsPartOf:"(.+)"/', $collection, $m);
    $collection = $m[1];

    $ISLANDORA_DSS_SOLR_RELATION_MAP = array_flip(array('eastasia' => 'East Asia Image Collection',
							'newspaper' => 'Lafayette Newspaper Collection',
							'academic' => 'Academic Publications',
							'cap' => 'Historical Photograph Collection',
							'mdl-prints' => 'Marquis de Lafayette Prints Collection',
							'geology-slides' => 'Geology Department Slide Collection',
							'administration' => 'Administration Archives',
							'mckelvy' => 'McKelvy House Photograph Collection',
							'war-casualties' => 'Lafayette World War II Casualties',
							));
    $collection = $ISLANDORA_DSS_SOLR_RELATION_MAP[$collection];
  }

  /**
   * foxml.all.text is functioning (without case sensitivity issues) for the cap and mdl-prints collections
   * Resolves DSS-207
   *
   */
  //if(true) {
  //if(!in_array($collection, array('cap', 'mdl-prints'))) {

  // create query
  $internal_solr_query = '';

  dpm(preg_split('/(?<=\)) /', $query));

  foreach(preg_split('/(?<=\)) /', $query) as $search) {

    if(preg_match('/(.+?)\:(\[.+?\])/', $search, $range_match)) { // Handling also for ranges

      $prefix = $range_match[1];
      $search = $range_match[2];
    } elseif(preg_match('/(.+?)\:\((.+?)\)/', $search, $m)) {

      $prefix = $m[1];
      $search = $m[2];
    } else { //if(!preg_match('/(.+?)\:\((.+?)\)/', $search, $m)) {

      dpm($search);
      continue;
    }

    // Handling for boolean operators
    if(preg_match('/(?:AND|OR|NOT) (.+)/', $prefix, $prefix_match)) {
      
      $field = $prefix_match[1];
    } else {

      $field = $prefix;
    }

    dpm(array($field,$search));

    /**
     * Work-around for case sensitivity
     * Resolves DSS-208
     *
     */
    $SOLR_FULLTEXT_FIELDS = array(
				  'foxml.all.text'
				  );

    $SOLR_INDEXED_FIELDS = array(
				 //'dc.title',
				 'eastasia.Title.Japanese',
				 'eastasia.Title.Chinese',
				 'eastasia.Title.Korean',
				 'eastasia.Subject.OCM',
				 'eastasia.Description.Critical',
				 'eastasia.Description.Caption.English',
				 'eastasia.Description.Caption.Japanese',
				 'eastasia.Description.Indicia',
				 'eastasia.Coverage.Location',
				 'eastasia.Coverage.Location.Country',
				 'eastasia.Description.Ethnicity',
				 'eastasia.Contributors.Digital',
				 'cdm.Relation.IsPartOf',
				 'eastasia.Description.Citation',
				 'eastasia.Format.Medium',
				 'eastasia.Creator.Company',
				 'eastasia.Creator.Maker',
				 'eastasia.Format.Extent',
				 'eastasia.Contributor.Donor',
				 );

    //global $ISLANDORA_DSS_SOLR_DATE_FIELDS;
    $ISLANDORA_DSS_SOLR_DATE_FIELDS = array(
					    'dc.date',
					    "eastasia.Date.Artifact.Lower",
					    "eastasia.Date.Artifact.Upper",
					    "eastasia.Date.Image.Lower",
					    "eastasia.Date.Image.Upper",
					    "eastasia.Date.Original",
					    'mdl_prints.date.original',
					    'geology_slides_esi.date.original',
					    'mckelvy.date.original.search',
					    'war_casualties.date.birth.search',
					    'war_casualties.date.death.search'
					    );

    dpm(array($field));

    if(in_array($field, $ISLANDORA_DSS_SOLR_DATE_FIELDS)) {

      //$search = "[$search]";
      dpm(array($search));
      //$search = "($search)";

    } elseif(in_array($field, $SOLR_FULLTEXT_FIELDS)) { // For Solr-indexed fields supporting full-text indexing (i. e. not tokenized)

      // Quotation marks are applied to all queries
      preg_match('/"(.+?)"/', $search, $m);
      $search = '(' . $m[1] . ')';
    } elseif(in_array($field, $SOLR_INDEXED_FIELDS)) { // For Solr-indexed fields with specific Analyzers (i. e. not optimized for tokenization of contents)

      $prefix = str_replace($field, 'c_' . $field, $prefix);

      // Quotation marks are applied to all queries
      preg_match('/"(.+?)"/', $search, $m);
      $search = '(' . $m[1] . ')';
    } elseif($field == 'geology_slides_esi.subject') {

      // Quotation marks are applied to all queries
      preg_match('/"(.+?)"/', $search, $m);
      $search = $m[1];

      // Escape spaces
      // Refactor
      $search = preg_replace('/ /', '\ ', $search);
      // Escape brackets
      // Refactor
      $search = preg_replace('/\\[/', '\[', $search);
      $search = preg_replace('/\\]/', '\]', $search);

      //$search = "(*" . strtoupper($search) . "*)";
      $search = "(*$search* OR *" . strtoupper($search) . "*)";
    } else {

      // Quotation marks are applied to all queries
      preg_match('/"(.+?)"/', $search, $m);
      $search = $m[1];

      // Escape spaces
      // Refactor
      $search = preg_replace('/ /', '\ ', $search);
      // Escape brackets
      // Refactor
      $search = preg_replace('/\\[/', '\[', $search);
      $search = preg_replace('/\\]/', '\]', $search);

      dpm(array($search));

      if(ctype_upper($search)) { // Search segment characters are all in the upper case

	$search = "(*$search* OR *" . strtolower($search) . "* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	//$search = "(\"*$search*\" OR \"*" . strtolower($search) . "*\" OR \"*" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*\")";
      } elseif(ctype_lower($search)) { // Search segment characters are all in the lower case

	//$search = "(*$search* OR *" . strtoupper($search) . "*)";
	//$search = "(*$search* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	$search = "(*$search* OR *" . strtoupper($search) . "* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	//$search = "(\"*$search*\" OR \"*" . strtoupper($search) . "*\" OR \"*" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*\")";
      } elseif(preg_match('/[A-Z]/', $search)) { // Initial search segment character is in the upper case
	
	//$search = "(*$search* OR *" . lcfirst($search) . "*)";
	$search = "(*$search* OR *" . lcfirst($search) . "* OR *" . strtoupper($search) . "*)";
	//$search = "(\"*$search*\" OR \"*" . lcfirst($search) . "*\" OR \"*" . strtoupper($search) . "*\")";
      } else {

	//$search = "(*$search* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*)";
	$search = "(*$search* OR *" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "* OR *" . strtoupper($search) . "*)";
	//$search = "(\"*$search*\" OR \"*" . mb_convert_case($search, MB_CASE_TITLE, "UTF-8") . "*\" OR \"*" . strtoupper($search) . "*\")";
      }
    }

    //dpm(array($search));
    $internal_solr_query .= "$prefix:$search" . ' ';
  }

  /**
   * Special handling for foxml.all.text
   * Work-around resolving DSS-207
   *
   */
  if($query != '*:*') {
  
    /**
     * Deprecated by reindexing
     *
     */
    /*
    if($field == 'foxml.all.text' and !in_array($collection, array('cap', 'mdl-prints'))) {
    
      $collection_fields = array_keys(islandora_dss_fields_map($collection));
      foreach($collection_fields as $collection_field) {
      
	// Do not transform queries for any date fields
	if(!preg_match('/Date\./', $collection_field)) {

	  $query_array[] = array(
				 //'search' => "$collection_field:($search or )",
				 'search' => "$collection_field:$search",
				 'boolean' => 'OR'
				 );
	}
      }
    } else {
    
      $query_array[] = array(
			     //'search' => "$field:($search)",
			     'search' => "$field:$search",
			     //'boolean' => $boolean
			     );
    }
    */

    /*
    $query_array[] = array(
			   //'search' => "$field:($search)",
			   'search' => "$field:$search",
			   //'boolean' => $boolean
			   );
    */

    /*
    dpm($query_array);

    $i = 0;
    foreach ($query_array as $term) {
      
      $internal_solr_query .= $term['search'];
      if (count($query_array) -1 != $i) {
	$internal_solr_query .= ' ' . $term['boolean'] . ' ';
      }
      $i++;
    }
    */
  }
  //}

  if($query != '*:*') {

    $params['q'] = $internal_solr_query;
  } else {

    $internal_solr_query = $query;
  }

  dpm(array($internal_solr_query));
  dpm($params);

  /**
   * Ensure that all queries are sorted by the value of dc.title in ascending order
   * Resolves DSSSM-623
   *
   */
  if(!array_key_exists('sort', $params)) {

    $params['sort'] = 'dc.title asc';
  }

  dpm($params);

  // Build and execute Apache Solr query.
  // this populates the GLOBAL!!!!!!!
  $_islandora_solr_queryclass = new IslandoraSolrQueryProcessor();
  $_islandora_solr_queryclass->buildAndExecuteQuery($internal_solr_query, $params);

  if (empty($_islandora_solr_queryclass->islandoraSolrResult)) {
    return t('Error searching solr index.');
  }

  // TODO: Also filter secondary displays against those checked in the configuration options.
  if (isset($_GET['solr_profile']) && isset($secondary_profiles[$_GET['solr_profile']])) {
    $profile = $secondary_profiles[$_GET['solr_profile']];
  }
  elseif (isset($primary_profiles[$islandora_solr_primary_display])) {
    $profile = $primary_profiles[$islandora_solr_primary_display];
  }
  else {
    drupal_set_message(check_plain(t('There is an error in the solr search configuration: the display profile is not found.')), 'error');
    $profile = $primary_profiles['default'];
  }
  // Include the file for the display profile
  require_once(drupal_get_path('module', $profile['module']) . '/' . $profile['file']);

  // Get display class and function from current display
  $solr_class = $profile['class'];
  $solr_function = $profile['function'];

  // check if the display's class exists
  $use_default_display = TRUE;
  if (class_exists($solr_class)) {
    $implementation = new $solr_class();
    // check if the display's method exists
    if (method_exists($implementation, $solr_function)) {
      // implement results
      $output = $implementation->$solr_function($_islandora_solr_queryclass);
      $use_default_display = FALSE;
    }
  }

  // Class and method are not found: use default
  if ($use_default_display) {
    $results_class = new IslandoraSolrResults();
    $output = $results_class->displayResults($_islandora_solr_queryclass);
  }

  // debug dump
  if (variable_get('islandora_solr_debug_mode', 0)) {
    $message = t('Params: <br /><pre>!debug</pre>', array('!debug' => print_r($_islandora_solr_queryclass->solrParams, TRUE)));
    drupal_set_message(filter_xss($message, array('pre', 'br')), 'status');
  }

  return $output;
}

/**
 * Implemented hook_url_inbound_alter().
 * 
 */
function islandora_dss_solr_url_inbound_alter(&$path, $original_path, $path_language) {

  /**
   * Collection and sub-collection path aliases
   * Resolves DSSSM-665
   * @todo Refactor with variable_get
   *
   */

  /*
      'T.W. Ingersoll Co. Stereoviews of the Siege of Port Arthur' => { :primary => 'rjw-stereo' },

      'Imperial Postcard Collection' => { :primary => 'imperial-postcards', :secondary => 'imperial-postcards/backs' },
      
      'Postcard Albums' => {

        'Japanese Imperial House Postcard Album' => { :primary => 'pa-koshitsu', :secondary => 'pa-koshitsu' },
        'Tsubokura Russo-Japanese War Postcard Album' => { :primary => 'pa-tsubokura', :secondary => 'pa-tsubokura' },
        'Sino-Japanese War Postcard Album 01' => { :primary => 'pa-omitsu01', :secondary => 'pa-omitsu01' },
        'Sino-Japanese War Postcard Album 02' => { :primary => 'pa-omitsu02', :secondary => 'pa-omitsu02' },
      },

      'Lin Chia-Feng Family Postcard Collection' => { :primary => 'lin-postcards', :secondary => 'lin-postcards/back.orig' },    

      # Unique to ContentDM
      'Game Cards' => {

        'Japanese History Study Cards' => nil
      },
      
      'Pacific War Postcard Collection' => { :primary => 'pacwar-postcards', :secondary => 'pacwar-postcards/backs-300dpi' },

      'Michael Lewis Taiwan Postcard Collection' => { :primary => 'lewis-postcards', :secondary => 'lewis/fixed-lewis-postcard-backs' },
      
      # Not featured on http://digital.lafayette.edu/collections/eastasia
      'Gerald & Rella Warner Taiwan Postcard Collection' => { :primary => 'warner-postcards', :secondary => 'warner/warner-postcards-captioned/jpg' },

      'Gerald & Rella Warner Dutch East Indies Negative Collection' => { :primary => 'warner-negs-indonesia' },
      'Gerald & Rella Warner Manchuria Negative Collection' => { :primary => 'warner-negs-manchuria', :secondary => 'warner-negs-manchuria' },
      'Gerald & Rella Warner Taiwan Negative Collection' => { :primary => 'warner-negs-taiwan', :secondary => 'warner-negs-taiwan/warner-negs-taiwan-submerged-images' },
      'Gerald & Rella Warner Japan Slide Collection' => { :primary => 'warner-slides-japan' },
      'Gerald & Rella Warner Souvenirs of Beijing and Tokyo' => { :primary => 'warner-souvenirs' },

      'Woodsworth Taiwan Image Collection' => { :primary => 'woodsworth-images', :secondary => 'woodsworth-images/image-backs' },

      'Colonial Pictorial Works' => {
        
        'Scenic Taiwan' => { :primary => 'cpw-nofuko', :secondary => 'nofuko/nofuko-missing-pages-hoover-originals'},
        'Taiwan Photographic Monthly' => { :primary => 'cpw-shashinkai'}
      }
   */

  $ISLANDORA_DSS_SOLR_BROWSE_ALIASES = array(
					     'collections/eastasia/imperial-postcards',

					     'collections/eastasia/pa-koshitsu',
					     'collections/eastasia/pa-tsubokura',
					     'collections/eastasia/rjw-stereo',

					     'collections/eastasia/pa-omitsu01',
					     'collections/eastasia/pa-omitsu02',
					     'collections/eastasia/lin-postcards',
					     'collections/eastasia/pacwar-postcards',
					     'collections/eastasia/lewis-postcards',
					     'collections/eastasia/warner-postcards',
					     'collections/eastasia/warner-negs-indonesia',
					     'collections/eastasia/warner-negs-manchuria',
					     'collections/eastasia/warner-negs-taiwan',
					     'collections/eastasia/warner-slides-japan',
					     'collections/eastasia/warner-souvenirs',

					     'collections/eastasia/woodsworth-images',

					     'collections/eastasia/cpw-nofuko',
					     'collections/eastasia/cpw-shashinkai',

					     // Tentative
					     'collections/eastasia/gc-iroha01/browse',

					     // Tentative
					     'collections/mdl-prints/portraits-before-1789',
					     'collections/mdl-prints/portraits-quenedey',
					     'collections/mdl-prints/portraits-levachez',
					     'collections/mdl-prints/portraits-debucourt',
					     'collections/mdl-prints/portraits-weyler',
					     'collections/mdl-prints/portraits-jacobi',
					     'collections/mdl-prints/portraits-before-1800',
					     'collections/mdl-prints/portraits-clary',
					     'collections/mdl-prints/portraits-scheffer',
					     'collections/mdl-prints/portraits-gerard',
					     'collections/mdl-prints/portraits-maurin',
					     'collections/mdl-prints/portraits-julien',
					     'collections/mdl-prints/portraits-uniform-white',
					     'collections/mdl-prints/portraits-bridi',
					     'collections/mdl-prints/portraits-uniform-fur',
					     'collections/mdl-prints/portraits-martinet',
					     'collections/mdl-prints/portraits-misc',
					     'collections/mdl-prints/portraits-equestrian',
					     'collections/mdl-prints/caricatures',
					     'collections/mdl-prints/symbolic',
					     'collections/mdl-prints/family',
					     'collections/mdl-prints/life-scenes',
					     'collections/mdl-prints/homes',
					     );

  if(in_array($original_path, $ISLANDORA_DSS_SOLR_BROWSE_ALIASES)) {

    // Does not resolve issues with more complex GET parameters
    //$_GET += drupal_get_query_array(array_pop(explode('?', $path)));
    list($path, $query) = explode('?', $path);
    $facet_index = 0;
    foreach(drupal_get_query_array($query) as $facet_name => $facet_value) {

      $_GET["f"][$facet_index] = $facet_value;
      $facet_index++;
    }
  }
}

/**
 * Implements hook_menu().
 */
function islandora_dss_solr_menu_alter(&$items) {

  /*
  $items['islandora/search'] = array(
    'title' => 'Search results',
    'page callback' => 'islandora_solr',
    'access arguments' => array('search islandora solr'),
    'type' => MENU_CALLBACK,
  );
  */

  $items['islandora/search']['page callback'] = 'islandora_dss_solr';


}

